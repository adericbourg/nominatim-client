import java.time.Duration

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

group 'net.dericbourg'
version Git.getVersion()

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'

    implementation 'org.slf4j:slf4j-api:1.7.32'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
}

java {
    withJavadocJar()
    withSourcesJar()
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

def sonatypeUsername =  System.getenv("MAVEN_USERNAME")
def sonatypePassword = System.getenv("MAVEN_PASSWORD")

publishing {
    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "OSSRH"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = project.group
                name = project.name
                description = 'Example Project to learn how to deploy to OSSRH'
                url = 'https://example.com/'
                from components.java
                licenses {
                    license {
                        name = 'The GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:adericbourg/nominatim-client.git'
                    developerConnection = 'scm:git:git@github.com:adericbourg/nominatim-client.git'
                    url = 'https://github.com/adericbourg/nominatim-client/'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

signing {
    def signingKey = System.getenv("PGP_KEY")
    def signingPassword = System.getenv("PGP_KEY_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

class Git {

    static String getVersion() {
        if (isOnTag()) {
            return getCurrentTag()
        } else {
            return "${new Date().format('yyyyMMddHHmmss')}-${getGitHash()}-SNAPSHOT"
        }
    }

    static String getCurrentTag() {
        return "git describe --tags --exact-match".execute().text.trim()
    }

    static Boolean isOnTag() {
        return !getCurrentTag().isBlank()
    }

    static String getGitHash() {
        return "git rev-parse --short HEAD".execute().text.trim()

    }
}
